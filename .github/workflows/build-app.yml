# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Python application

on:
  push:
    branches:
      - '*'
  pull_request:
    branches:
      - '*'

jobs:
  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - name: Create tag
        id: create_tag
        run: |
          tag=$(basename "${{ github.ref }}")
          echo "::set-output name=tag::$tag"
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.create_tag.outputs.tag }}
          release_name: ${{ steps.create_tag.outputs.tag }}
          draft: true
          prerelease: false
      - name: Create artifact files
        run: |
          mkdir info
          echo "${{ steps.create_release.outputs.id }}" > info/release_id
          echo "${{ steps.create_release.outputs.upload_url }}" > info/upload_url
      - uses: actions/upload-artifact@v1
        with:
          name: info
          path: info

  build:
    needs: [release]
    strategy:
      fail-fast: false
      matrix:
          os: [ ubuntu-latest, macos-latest, windows-latest ]
          python-version: [3.6, 3.7, 3.8, 3.9]
          name: [ head ]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/download-artifact@v1
      with:
        name: info
    - name: Set upload_url
      id: upload_info
      run: |
        upload_url=$(cat info/upload_url)
        echo "::set-output name=upload_url::$upload_url"
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pytest pyinstaller
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    - name: Test with pytest
      run: |
        pytest
    - name: Deploy with pyinstaller
      run: |
        echo "BUILD_NUMBER = '${{ github.run_number }}'" >> ${{ github.workspace }}/adventure/util.py
        pyinstaller zorkdemo.spec
        ${{ github.workspace }}/dist/zorkdemo --version
    - name: Create Windows archive
      run: |
        tar -a -c -f dist/zorkdemo-python-${{ matrix.python-version }}-${{ matrix.os }}.zip dist/zorkdemo
      if: matrix.name == 'windows-latest'
    - name: Create non-Windows archive
      run: |
        gzip dist/zorkdemo
        mv dist/zorkdemo.gz dist/zorkdemo-python-${{ matrix.python-version }}-${{ matrix.os }}.gz
      if: matrix.name != 'windows-latest'
    - name: Upload Built Zorkdemo
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.upload_info.outputs.upload_url }}
        asset_path: dist/zorkdemo-python-${{ matrix.python-version }}-${{ matrix.os }}.gz
        asset_name: zorkdemo-python-${{ matrix.python-version }}-${{ matrix.os }}.gz
        asset_content_type: application/gzip

  metadata:
    name: Publish Release
    needs: [ build ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v1
        with:
          name: info
      - name: Set publish_info
        id: publish_info
        run: |
          release_id=$(cat info/release_id)
          echo "::set-output name=release_id::$release_id"
      - uses: eregon/publish-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          release_id: ${{ steps.publish_info.outputs.release_id }}
      - uses: eregon/keep-last-n-releases@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          n: 3